import os
import cv2
import torch
import detectron2
from detectron2.data.datasets import register_coco_instances
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.model_zoo import get_config_file
import numpy as np
from google.colab import drive
from detectron2.data.datasets import register_coco_instances
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.model_zoo import get_config_file
from google.colab.patches import cv2_imshow
from detectron2.engine import DefaultPredictor
from google.colab import files
import ipywidgets as widgets
from IPython.display import display, clear_output


cfg = get_cfg()
config_file_path = get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg.merge_from_file(config_file_path)
dataset_root = "/content/drive/MyDrive/project/"
train_images = os.path.join(dataset_root, "train")
train_annotations = os.path.join(dataset_root, "train/_annotations.coco.json")
test_images = os.path.join(dataset_root, "test")
test_annotations = os.path.join(dataset_root, "test/_annotations.coco.json")

register_coco_instances("parking_train", {}, train_annotations, train_images)
register_coco_instances("parking_test", {}, test_annotations, test_images)

metadata = MetadataCatalog.get("parking_train")
dataset_dicts = DatasetCatalog.get("parking_train")
cfg = get_cfg()
config_file_path = get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml")
cfg.merge_from_file(config_file_path)

cfg.DATASETS.TRAIN = ("parking_train",)
cfg.DATASETS.TEST = ("parking_test",)
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = "detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl"
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.001
cfg.SOLVER.MAX_ITER = 1000
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 2

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg)
trainer.resume_or_load(resume=False)
trainer.train()

from google.colab.patches import cv2_imshow
from detectron2.engine import DefaultPredictor

cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
predictor = DefaultPredictor(cfg)

image_path = "/content/drive/MyDrive/project/test/2013-02-23_11_35_05_jpg.rf.bcd5f0c01def044603c9e378bed18454.jpg"
image = cv2.imread(image_path)

outputs = predictor(image)

v = Visualizer(image[:, :, ::-1], metadata=metadata, scale=1.2)
out = v.draw_instance_predictions(outputs["instances"].to("cpu"))

instances = outputs["instances"]
total_spaces = len(instances)
available_spaces = sum(instances.pred_classes.tolist())

caption = f"Available Spaces: {available_spaces}"

img = out.get_image()[:, :, ::-1].copy()

cv2.putText(img, caption, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

cv2_imshow(img)


available_spaces = 0

def process_image(image_bytes):
    global available_spaces
    nparr = np.frombuffer(image_bytes, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    outputs = predictor(image)

    v = Visualizer(image[:, :, ::-1], metadata=metadata, scale=1.2)
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))

    instances = outputs["instances"]
    total_spaces = len(instances)
    available_spaces = sum(instances.pred_classes.tolist())

    caption = f"Available Spaces: {available_spaces}"
    img = out.get_image()[:, :, ::-1].copy()
    cv2.putText(img, caption, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2_imshow(img)


upload_button = widgets.FileUpload(accept='image/*', multiple=False)
reserve_button = widgets.Button(description="Reserve Spot")
output = widgets.Output()

def reserve_spot(b):
    global available_spaces
    with output:
        clear_output()
        if available_spaces > 0 :
            available_spaces -= 1
            print("Parking lot reserved successful")
            print(f"Available spaces: {available_spaces}")

        else:
            print("No available parking spots.")


reserve_button.on_click(reserve_spot)

display(upload_button, reserve_button, output)

def on_upload_change(change):
    uploaded_file = list(upload_button.value.values())[0]
    process_image(uploaded_file['content'])

upload_button.observe(on_upload_change, names='_counter')
